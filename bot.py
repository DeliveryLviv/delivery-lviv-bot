import os
from flask import Flask, request
from telegram import Update, Bot, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
import asyncio

# –û—Å–Ω–æ–≤–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TOKEN = "7333032712:AAGDIXKZPa-iBabPRL2YaWI9_oeL5gTaA1Y"
ADMIN_CHAT_ID = 915669253
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"https://delivery-lviv-bot.onrender.com{WEBHOOK_PATH}"

# –ö—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏
NAME, SERVICE, LOADERS, ADDRESS, TIME, PHONE = range(6)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø–æ—Å–ª—É–≥
service_keyboard = [
    ["üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–Ω–∏–π —Ç–∞ –æ—Ñ—ñ—Å–Ω–∏–π –ø–µ—Ä–µ—ó–∑–¥"],
    ["üì¶ –ü–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –∑–±—ñ—Ä–Ω–∏—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤"],
    ["üß± –ü–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –±—É–¥ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤"],
    ["‚ö†Ô∏è –ü–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –Ω–µ–≥–∞–±–∞—Ä–∏—Ç–Ω–∏—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤"],
    ["üèó –í–∏–≤—ñ–∑ –±—É–¥—Å–º—ñ—Ç—Ç—è"],
    ["‚ùÑÔ∏è –ü–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –≤–∞–Ω—Ç–∞–∂—ñ–≤ —Ä–µ—Ñ—Ä–∏–∂–∏—Ä–∞—Ç–æ—Ä–æ–º"],
    ["üöõ –î–æ—Å—Ç–∞–≤–∫–∞ –º–µ–±–ª—ñ–≤, —Ç–µ—Ö–Ω—ñ–∫–∏, —ñ–Ω—à–µ"],
    ["üè¨ –î–ª—è –º–∞–≥–∞–∑–∏–Ω—ñ–≤: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —Ç–æ–≤–∞—Ä—ñ–≤"],
    ["üçΩ –î–ª—è –∫–ª—ñ–Ω—ñ–∫, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤, –∫–∞–≤ º—è—Ä–µ–Ω—å"],
    ["üõí –î–ª—è –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω—ñ–≤ (–ª–æ–≥—ñ—Å—Ç–∏–∫–∞)"]
]

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask —ñ Telegram
app = Flask(__name__)
bot = Bot(token=TOKEN)
application = Application.builder().token(TOKEN).build()

# –í–µ–±—Ö—É–∫: –ø—Ä–∏–π–º–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ Telegram
@app.post(WEBHOOK_PATH)
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    application.update_queue.put_nowait(update)
    return "OK", 200

@app.route("/", methods=["GET"])
def root():
    return "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!"

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥—ñ–∞–ª–æ–≥—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:",
        reply_markup=ReplyKeyboardMarkup(service_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return SERVICE

async def get_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["service"] = update.message.text
    await update.message.reply_text("–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∞–Ω—Ç–∞–∂–Ω–∏–∫–∏? –Ø–∫—â–æ —Ç–∞–∫ ‚Äî –≤–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å. –Ø–∫—â–æ –Ω—ñ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω—ñ'.",
                                    reply_markup=ReplyKeyboardRemove())
    return LOADERS

async def get_loaders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["loaders"] = update.message.text
    await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è (–∑–≤—ñ–¥–∫–∏ —ñ –∫—É–¥–∏):")
    return ADDRESS

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    await update.message.reply_text("–ù–∞ —è–∫–∏–π –¥–µ–Ω—å —ñ —á–∞—Å –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è?")
    return TIME

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text
    await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    msg = f"""üì¶ –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø!

üë§ –Ü–º‚Äô—è: {context.user_data['name']}
üõ† –ü–æ—Å–ª—É–≥–∞: {context.user_data['service']}
üßç‚Äç‚ôÇÔ∏è –í–∞–Ω—Ç–∞–∂–Ω–∏–∫–∏: {context.user_data['loaders']}
üìç –ê–¥—Ä–µ—Å–∞: {context.user_data['address']}
‚è∞ –ß–∞—Å: {context.user_data['time']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}"""

    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)
    await update.message.reply_text("–î—è–∫—É—î–º–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –ø—Ä–æ—Ç—è–≥–æ–º 10 —Ö–≤–∏–ª–∏–Ω.",
                                    reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –û–±—Ä–æ–±–Ω–∏–∫–∏
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_service)],
        LOADERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_loaders)],
        ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
        TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

application.add_handler(conv_handler)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
async def setup():
    await application.initialize()
    await application.start()
    await bot.set_webhook(WEBHOOK_URL)
    print("‚úÖ –í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ñ –±–æ—Ç –ø—Ä–∞—Ü—é—î")

asyncio.get_event_loop().run_until_complete(setup())
