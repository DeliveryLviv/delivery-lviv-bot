
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)

import os
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))


# –ö—Ä–æ–∫–∏
NAME, SERVICE, LOADERS, ADDRESS, TIME, PHONE = range(6)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø–æ—Å–ª—É–≥
service_keyboard = [
    ["üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–Ω–∏–π —Ç–∞ –æ—Ñ—ñ—Å–Ω–∏–π –ø–µ—Ä–µ—ó–∑–¥"],
    ["üì¶ –ü–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –∑–±—ñ—Ä–Ω–∏—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤"],
    ["üß± –ü–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –±—É–¥ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤"],
    ["‚ö†Ô∏è –ü–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –Ω–µ–≥–∞–±–∞—Ä–∏—Ç–Ω–∏—Ö –≤–∞–Ω—Ç–∞–∂—ñ–≤"],
    ["üèó –í–∏–≤—ñ–∑ –±—É–¥—Å–º—ñ—Ç—Ç—è"],
    ["‚ùÑÔ∏è –ü–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –≤–∞–Ω—Ç–∞–∂—ñ–≤ —Ä–µ—Ñ—Ä–∏–∂–∏—Ä–∞—Ç–æ—Ä–æ–º"],
    ["üöõ –î–æ—Å—Ç–∞–≤–∫–∞ –º–µ–±–ª—ñ–≤, —Ç–µ—Ö–Ω—ñ–∫–∏, —ñ–Ω—à–µ"],
    ["üè¨ –î–ª—è –º–∞–≥–∞–∑–∏–Ω—ñ–≤: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —Ç–æ–≤–∞—Ä—ñ–≤"],
    ["üçΩ –î–ª—è –∫–ª—ñ–Ω—ñ–∫, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤, –∫–∞–≤ º—è—Ä–µ–Ω—å"],
    ["üõí –î–ª—è –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω—ñ–≤ (–ª–æ–≥—ñ—Å—Ç–∏–∫–∞)"]
]

start_keyboard = [["üöÄ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
        reply_markup=ReplyKeyboardMarkup(start_keyboard, resize_keyboard=True)
    )
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üöÄ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?", reply_markup=ReplyKeyboardRemove())
        return NAME
    context.user_data["name"] = update.message.text
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:",
        reply_markup=ReplyKeyboardMarkup(service_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return SERVICE

async def get_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["service"] = update.message.text
    await update.message.reply_text("–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∞–Ω—Ç–∞–∂–Ω–∏–∫–∏? –Ø–∫—â–æ —Ç–∞–∫ ‚Äî –≤–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å. –Ø–∫—â–æ –Ω—ñ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω—ñ'.",
                                    reply_markup=ReplyKeyboardRemove())
    return LOADERS

async def get_loaders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["loaders"] = update.message.text
    await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è (–∑–≤—ñ–¥–∫–∏ —ñ –∫—É–¥–∏):")
    return ADDRESS

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    await update.message.reply_text("–ù–∞ —è–∫–∏–π –¥–µ–Ω—å —ñ —á–∞—Å –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è?")
    return TIME

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text
    await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    msg = f"""üì¶ –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø!

üë§ –Ü–º‚Äô—è: {context.user_data['name']}
üõ† –ü–æ—Å–ª—É–≥–∞: {context.user_data['service']}
üßç‚Äç‚ôÇÔ∏è –í–∞–Ω—Ç–∞–∂–Ω–∏–∫–∏: {context.user_data['loaders']}
üìç –ê–¥—Ä–µ—Å–∞: {context.user_data['address']}
‚è∞ –ß–∞—Å: {context.user_data['time']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}"""

    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)
    await update.message.reply_text(
        "–î—è–∫—É—î–º–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –ø—Ä–æ—Ç—è–≥–æ–º 10 —Ö–≤–∏–ª–∏–Ω.",
        reply_markup=ReplyKeyboardMarkup(start_keyboard, resize_keyboard=True)
    )
    return NAME

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_service)],
            LOADERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_loaders)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ polling")
    app.run_polling()

if __name__ == "__main__":
    main()
